@using Backend.App.Labels
@using Backend.App.Labels.Ent
@using Backend.App.Config
@using Backend.App.Config.Ent
@using Blazor.Flags
@using Web.Data

@inject ClientState ClientState
@inject NavigationManager Navigation

<div>
    @if (_isLoading)
    {
        <Loading />
    }
    else
    {
        <div class="lang-flags top-row px-1">
            @foreach (var langCode in @langCodes)
            {
                <div class="@GetClass(langCode.Code)" @onclick='@(() => HandleClick(langCode.Code))'>
                    <CountryFlag Country="GetCountryFlag(langCode)" Size="FlagSize.Normal" />
                </div>
            }
        </div>
    }
</div>

@code {
    private List<LangCode> langCodes;
    public bool _isLoading = true;

    [Parameter]
    public EventCallback<string> OnClick { get; set; }

    [Parameter]
    public string selectedLangCodes { get; set; }


    protected override async Task OnInitializedAsync()
    {
        langCodes = LabelManager.GetLanguageCodes();
        _isLoading = false;
    }


    private async Task HandleClick(string langCode)
    {
        await OnClick.InvokeAsync(langCode);
    }

    private Country GetCountryFlag(LangCode langCode)
    {
        switch (langCode.Code)
        {
            case "en": return Country.GB;
            case "de": return Country.DE;
            case "es": return Country.ES;
            default: return Country.NZ;
        }
    }

    private string GetClass(string langCode)
    {
        if (!string.IsNullOrEmpty(langCode) 
            && !string.IsNullOrEmpty(selectedLangCodes)
            && selectedLangCodes.Contains(langCode))
            return "lang-flag-link-current";

        return "lang-flag-link";
    }
}