@using Backend.App.Labels
@using Backend.App.Labels.Ent
@using Backend.App.Config
@using Backend.App.Config.Ent
@using Blazor.Flags
@inject LabelService LabelService
@inject ConfigService ConfigService
@inject NavigationManager Navigation

<div>
    @if (_isLoading)
    {
        <Loading />
    }
    else
    {
        <div class="top-row px-4">
            @foreach (var langCode in @langCodes)
            {
                <button class="lang-flag-link" @onclick='@(() => ChangeLanguage(langCode.Code))'>
                    <CountryFlag Country="GetCountryFlag(langCode)" Size="FlagSize.Normal" />
                </button>
            }
        </div>
    }
</div>

@code {
    private LabelManager labelMgr;
    private List<LangCode> langCodes;
    private AppConfig appConfig;
    public bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        appConfig = await ConfigService.GetAppConfig();
        labelMgr = await LabelService.GetLabelManager(appConfig.LangCode, appConfig.OrgId);
        langCodes = LabelManager.GetLanguageCodes();
        _isLoading = false;
    }

    private async Task ChangeLanguage(string langCode)
    {
        appConfig.LangCode = langCode;
        labelMgr = await LabelService.GetLabelManager(appConfig.LangCode, appConfig.OrgId);
        StateHasChanged();
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }

    private Country GetCountryFlag(LangCode langCode)
    {
        switch (langCode.Code)
        {
            case "en": return Country.GB;
            case "de": return Country.DE;
            case "es": return Country.ES;
            default: return Country.NZ;
        }
    }
}