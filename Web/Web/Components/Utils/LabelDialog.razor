@using Backend.App.Labels
@using Backend.App.Labels.Ent
@using Backend.App.Config
@using Backend.App.Config.Ent
@using Web.Components.Utils
@using Web.Data

@inject ILabelService labelService;

@if (ShowDialog)
{
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4" style="background-color: #f2f2f2;  border: 1px solid black;">
                <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                    <div class="label-key">
                        <Label Key="Code" />:&nbsp; 
                        <div>@Title</div>
                    </div>
                    <div class="label-langcode">
                        <Label Key="LangCode" />:&nbsp;
                        <div>@clientState.appConfig.LangCode</div>
                    </div>

                    <MudTextField T="string" Label="Label" @ref="_label" Required="true" RequiredError="Label is required!" />
                    <MudTextField T="string" Label="Tooltip" @ref="_tooltip" />
                    <MudTextField T="int" Label="Org" @ref="_org" />

                    <div class="d-flex align-right label-buttons">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto" OnClick="Save">Save</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="CloseDialog" style="margin-left: 10px">Cancel</MudButton>
                    </div>
                </MudForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code {
    [Parameter] public bool ShowDialog { get; set; }
    [Parameter] public string Title { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback<string> OnParameterChanged { get; set; }

    [Inject]
    protected ClientState clientState { get; set; }

    bool success;
    string[] errors = { };
    MudForm form;
    MudTextField<string> _label;
    MudTextField<string> _tooltip;
    MudTextField<int> _org;
    LangLabel langLabel;

    protected override async Task OnInitializedAsync()
    {
        langLabel = clientState.labelMgr.GetLabelObject(Title);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && langLabel != null)
        {
            _label.Value = langLabel.Description;
            StateHasChanged(); // Ensure the component re-renders to reflect the updated value
        }
    }

    private void CloseDialog()
    {
        ShowDialog = false;
    }

    private async Task ChangeParameter()
    {
        var newValue = "close";
        await OnParameterChanged.InvokeAsync(newValue);
    }

    private async Task Save()
    {
        await form.Validate();
        if (success)
        {
            int? org = _org.Value;
            if (org == 0) org = null;

            LangLabel label = new LangLabel
            {
                Id = 0,
                LangCode = clientState.appConfig.LangCode,
                Code = Title,
                Description = _label.Value,
                Tooltip = _tooltip.Value,
                _OrgId = org
            };

            var result = labelService.SaveLabel(label);
            clientState.labelMgr.UpdateLabel(label);
        }
        else
        {
            Console.WriteLine("Form is invalid.");
        }
    }
   

}
