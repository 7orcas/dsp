@inherits BasePage

@using Backend.App.Labels
@using Backend.App.Labels.Ent
@using Backend.App.Config
@using Backend.App.Config.Ent
@using Web.Components.Utils
@using Web.Data

@inject ClientState clientState

@InitialiseLabel()

<div>
    @if (_showTooltip)
    {
        <div data-tooltip="@ShowToolTip()">
            <button class="@GetClass()" @onclick="OpenDialog">@ShowLabel()</button>
        </div>
    }
    else 
    {
        <button class="@GetClass()" @onclick="OpenDialog">@ShowLabel()</button>
    }

    <LabelDialog ShowDialog="@_showModal" Title="@Key">
        <p>@ShowLabelText()</p>
    </LabelDialog>

</div>


@code {
    private LabelManager? labelMgr;
    private AppConfig? appConfig;

    [Parameter]
    public string Key { get; set; }

    private bool _showLink = false;
    private bool _showNoKey = false;
    private bool _showModal = false;
    private bool _showTooltip = false;

    protected override async Task OnInitializedAsync()
    {
        appConfig = clientState.appConfig;
        labelMgr = clientState.labelMgr;
    }

    private string InitialiseLabel()
    {
        _showLink = appConfig?.IsLabelLink ?? false;
        _showNoKey = _showLink && (!labelMgr?.IsLabel(Key) ?? false);
        _showTooltip = labelMgr?.IsTooltip(Key) ?? false;
        return "";
    }

    private string ShowLabel()
    {
        return
            (_showNoKey ? "[" : "")
            + labelMgr?.GetLabel(Key)
            + (_showNoKey ? "]" : "")
            ;
    }

    private string ShowLabelText()
    {
        if (labelMgr == null) return "No labelMgr";
        if (!labelMgr.IsLabel(Key)) return "No Key";
        return labelMgr.GetLabel(Key);
    }

    private string? ShowToolTip()
    {
        return labelMgr?.GetTooltip(Key);
    }

    private string GetClass()
    {
        if (_showNoKey) return "label-nokey";
        if (_showLink) return "label-link";
        return "label";
    }

    private void OpenDialog()
    {
        _showModal = _showLink;
    }

}
