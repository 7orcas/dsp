
@using Backend.App.Labels
@using Backend.App.Labels.Ent
@using Backend.App.Config
@using Backend.App.Config.Ent
@using Web.Components.Utils

@inherits BasePage
@* @rendermode InteractiveServer *@
@inject LabelService LabelService
@inject ConfigService ConfigService

@if (_isLoading)
{
    <Loading />
}
else
{
    @IsNoLabel() @* force a label test*@

    <div>
        @if (_noKey && _showLink)
        {
            <button class="label-link-nokey" @onclick="OpenDialog">@ShowLabel()</button>
        }
        else if (_noKey)
        {
            <span class="label-nokey">
                @ShowLabel()
            </span>
        }
        else if (_showTooltip)
        {
            <div data-tooltip="@ShowToolTip()">
                @ShowLabel()
                @if (_showLink)
                {
                    <button class="label-link" @onclick="OpenDialog">*</button>
                }
            </div>
        }
        else 
        {
            @ShowLabel()
            @if (_showLink)
            {
                <button class="label-link" @onclick="OpenDialog">*</button>
            }
        }


        <LabelDialog ShowDialog="@_showModal" Title="@Key">
            <p>This is the content of the modal dialog.</p>
        </LabelDialog>

    </div>
}

@code {
    private LabelManager? labels;
    private AppConfig? config;

    [Parameter]
    public string Key { get; set; }

    private bool _noKey = false;
    private bool _showLink = false;
    private bool _showModal = false;
    private bool _showTooltip = false;

    protected override async Task OnInitializedAsync()
    {
        Func<Task> lambda = async () => config = await ConfigService.GetAppConfig();
        await Run(lambda);

        lambda = async () => labels = await LabelService.GetLabelManager(config.LangCode, config.OrgId);
        await Run(lambda);
    }

    private string IsNoLabel()
    {
        _noKey = false;
        _showLink = config.IsLabelLink;

        if (_showLink)
        {
            if (!labels.IsLabel(Key))
                _noKey = true;
        }

        if (labels.IsTooltip(Key))
            _showTooltip = true;
        return "";
    }

    private string ShowLabel()
    {
        return
            (_noKey ? "[" : "")
            + labels.GetLabel(Key)
            + (_noKey ? "]" : "")
            ;
    }

    private string? ShowToolTip()
    {
        return labels.GetTooltip(Key);
    }


    private void OpenDialog()
    {
        _showModal = true;
    }

}
