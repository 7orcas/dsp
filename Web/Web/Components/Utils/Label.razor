
@using Backend.App.Labels
@using Backend.App.Labels.Ent
@using Backend.App.Config
@using Backend.App.Config.Ent
@using Web.Components.Utils

@inherits BasePage
@rendermode InteractiveServer
@inject LabelService LabelService
@inject ConfigService ConfigService

@if (_isLoading)
{
    <Loading />
}
else
{
    @IsNoLabel() @* force a label test*@

    <div>
        @if (_noKey)
        {
            <span style="color:red">
                @ShowLabel()
            </span>
        }
        else
        {
            @ShowLabel()
        }

        @if (_showLink)
        {
            <button class="label-link" @onclick="OpenDialog">*</button>
        }

        <LabelDialog ShowDialog="@_showModal" Title="@Key">
            <p>This is the content of the modal dialog.</p>
        </LabelDialog>

    </div>
}

@code {
    private LabelManager? labels;
    private AppConfig? config;

    [Parameter]
    public string Key { get; set; }

    private bool _noKey = false;
    private bool _showLink = false;
    private bool _showModal = false;

    protected override async Task OnInitializedAsync()
    {
        Func<Task> lambda = async () => labels = await LabelService.GetLabelManager(null);
        await Run(lambda);

        lambda = async () => config = await ConfigService.GetAppConfig(null);
        await Run(lambda);

    }

    private string IsNoLabel()
    {
        _noKey = false;
        _showLink = config.IsLabelLink;

        if (_showLink)
        {
            if (!labels.IsLabel(Key))
                _noKey = true;
        }
        return "";
    }

    private string ShowLabel()
    {
        if (labels == null || config == null)
            return "Loading...";

        return
            (_noKey ? "[" : "")
            + labels.GetLabel(Key)
            + (_noKey ? "]" : "")
            ;
    }


    private void OpenDialog()
    {
        _showModal = true;
    }

}
